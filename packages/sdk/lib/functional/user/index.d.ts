/**
 * @packageDocumentation
 * @module api.functional.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection, IPropagation, Resolved } from "@nestia/fetcher";
import typia from "typia";
/**
 * @controller UserController.create
 * @path POST /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function create(connection: IConnection, data: create.Input): Promise<create.Output>;
export declare namespace create {
    type Input = {
        email: string;
        password: string;
        id?: undefined | string;
        firstName?: null | undefined | string;
        middleName?: null | undefined | string;
        lastName?: null | undefined | string;
    };
    type Output = IPropagation<{
        201: string;
    }>;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/user";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: null;
    };
    const path: () => string;
    const random: (g?: Partial<typia.IRandomGenerator>) => Resolved<string>;
    const simulate: (connection: IConnection, data: create.Input) => Output;
}
